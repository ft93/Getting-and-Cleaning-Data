data <- subset(data_file, subset=(Date >= "2007-02-01" & Date <="2007-02-02"))
rm(data_file)
## converting the date into date/time classes in R
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## plotting the hist graph
hist(data$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="red")
## Export the file to png
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
## Getting full dataset
data_full <- read.csv("./ExData_Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 1
hist(data$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## Saving to file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
?rm
## Getting full dataset
data_file <- read.csv("./ExData_Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_file$Date <- as.Date(data_file$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_file, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_file)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 1
hist(data$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## Saving to file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
## Getting full dataset
data_file <- read.csv("./ExData_Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_file$Date <- as.Date(data_file$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_file, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_file)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 1
plot(data$Global_active_power, main="Global Active Power",
xlab="", ylab="Global Active Power (kilowatts)", type="1")
## Saving to file
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
xlab="", ylab="Global Active Power (kilowatts)")
## Getting full dataset
data_file <- read.csv("./ExData_Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_file$Date <- as.Date(data_file$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_file, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_file)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 1
plot(data$Global_active_power~data$Datetime, type="1",
xlab="", ylab="Global Active Power (kilowatts)")
## Saving to file
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
## Getting full dataset
data_file <- read.csv("./ExData_Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_file$Date <- as.Date(data_file$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_file, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_file)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 2
plot(data$Global_active_power~data$Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
## Saving to file
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
?with
## Getting full dataset
data_file <- read.csv("./ExData_Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_file$Date <- as.Date(data_file$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_file, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_file)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plotting graph number  3
with(data, {
plot(Sub_metering_1~Datetime, type="1", ylab="Energy sub metering", xlab="")
lines(Sub_metering_2~Datetime,col="Red")
lines(Sub_metering_3~Datetime,col="Blue")
})
## creating a legend
legend("topright", col=c("black","red","blue"), lty=1, lwd=2,
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
## Saving to file
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
## Getting full dataset
data_file <- read.csv("./ExData_Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_file$Date <- as.Date(data_file$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_file, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_file)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plotting graph number  3
with(data, {
plot(Sub_metering_1~Datetime, type="1", ylab="Energy sub metering", xlab="")
lines(Sub_metering_2~Datetime,col="Red")
lines(Sub_metering_3~Datetime,col="Blue")
})
## creating a legend
legend("topright", col=c("black","red","blue"), lty=1, lwd=2,
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
## Saving to file
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
## Getting full dataset
data_file <- read.csv("./ExData_Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_file$Date <- as.Date(data_file$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_file, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_file)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plotting graph number  3
with(data, {
plot(Sub_metering_1~Datetime, type="l", ylab="Energy sub metering", xlab="")
lines(Sub_metering_2~Datetime,col="Red")
lines(Sub_metering_3~Datetime,col="Blue")
})
## creating a legend
legend("topright", col=c("black","red","blue"), lty=1, lwd=2,
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
## Saving to file
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
## Getting full dataset
data_file <- read.csv("./ExData_Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_file$Date <- as.Date(data_file$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_file, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_file)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plotting graph number  3
with(data, {
plot(Sub_metering_1~Datetime, type="l", ylab="Energy sub metering", xlab="")
lines(Sub_metering_2~Datetime,col="Red")
lines(Sub_metering_3~Datetime,col="Blue")
})
## creating a legend
legend("topright", col=c("black","red","blue"), lty=1, lwd=1,
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
## Saving to file
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
## Getting full dataset
data_file <- read.csv("./ExData_Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_file$Date <- as.Date(data_file$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_file, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_file)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plotting graph number  3
with(data, {
plot(Sub_metering_1~Datetime, type="l", ylab="Energy sub metering", xlab="")
lines(Sub_metering_2~Datetime,col="Red")
lines(Sub_metering_3~Datetime,col="Blue")
})
## creating a legend
legend("topright", col=c("black","red","blue"), lty=1, lwd=1,
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
## Saving to file
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
## Getting full dataset
data_file <- read.csv("./ExData_Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_file$Date <- as.Date(data_file$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_file, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_file)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plotting graph number  3
with(data, {
plot(Sub_metering_1~Datetime, type="l", ylab="Energy sub metering", xlab="")
lines(Sub_metering_2~Datetime,col="Red")
lines(Sub_metering_3~Datetime,col="Blue")
})
## creating a legend
legend("topright", col=c("black","red","blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
## Saving to file
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
## Getting full dataset
data_file <- read.csv("./ExData_Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_file$Date <- as.Date(data_file$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_file, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_file)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plotting graph number  3
with(data, {
plot(Sub_metering_1~Datetime, type="l", ylab="Energy sub metering", xlab="")
lines(Sub_metering_2~Datetime,col="Red")
lines(Sub_metering_3~Datetime,col="Blue")
})
## creating a legend
legend("topright", col=c("black","red","blue"), lty=1, lwd=2,
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
## Saving to file
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
## Getting full dataset
data_file <- read.csv("./ExData_Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_file$Date <- as.Date(data_file$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_file, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_file)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plotting graph number 4
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data, {
plot(Global_active_power~Datetime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~Datetime, type="l", ylab="Voltage (Volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l", ylab="Energy sub metering", xlab="")
lines(Sub_metering_2~Datetime,col="Red")
lines(Sub_metering_3~Datetime,col="Blue")
legend("topright", col=c("black","red","blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l", ylab="Global Reative Power (kilowatts)", xlab="")
})
## Saving to file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
install.packages("RMySQL")
install.packages(c("KernSmooth", "MASS", "boot", "class", "cluster", "codetools", "jsonlite", "mgcv", "nlme", "testthat"))
install.packages("RMySQL")
install.packages("RMySQL", type="source")
# Find your R home
$ echo "R.home()" | Rscript  /dev/stdin
Loading required package: stats
Loading required package: methods
[1] "/usr/local/Cellar/r/3.0.1/R.framework/Resources"
# Make sure that you have the MySQL home var in your Renviron
$ fgrep MYSQL_HOME /usr/local/Cellar/r/3.0.1/R.framework/Resources/etc/Renviron
MYSQL_HOME="/usr/local/mysql-5.6.12-osx10.7-x86_64/"
#### This step trips up everyone ####
# Make sure that the libmysqlclient dynamic lib is in your R lib path by
# 1. Get the dll path
$ echo "Sys.getenv('DYLD_FALLBACK_LIBRARY_PATH')" | Rscript  /dev/stdin
Loading required package: stats
Loading required package: methods
[1] "/usr/local/Cellar/r/3.0.1/R.framework/Resources/lib"
# 2. Symlink your libmysqlclient
$ ln -s /usr/local/mysql-5.6.12-osx10.7-x86_64/lib/libmysqlclient.18.dylib  /usr/local/Cellar/r/3.0.1/R.framework/Resources/lib
# 3. Install the package
$ export PKG_LIBS="-L/usr/local/mysql-5.6.12-osx10.7-x86_64/lib/ -lmysqlclient"
$ export PKG_CPPFLAGS="-I/usr/local/mysql-5.6.12-osx10.7-x86_64/include/"
$ R CMD INSTALL  RMySQL.tar.gz
...
...
** installing vignettes
** testing if installed package can be loaded
* DONE (RMySQL)
library("RMySQL")
install.packages("RMySQL", type="source")
ucscDB <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
source("http://bioconductor.org/bioLite.R")
bioLite("rhdf5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls*"example.h5"
h5ls("example.h5")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github","ClintID","ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
GET("https://api.github.com/rate_limit", config(token = github_token))
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
> library(httr)
> oauth_endpoints("github")
> myapp <- oauth_app("github", "ClientID", "ClientSecret")
> github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
> req <- GET("https://api.github.com/rate_limit", config(token = github_token))
> stop_for_status(req)
> content(req)
> BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github","4462a0309c8ee2327b76","63122ae952fc310b354093d05ce0d1b6ffcd8af7
")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
myapp <- oauth_app("github","63122ae952fc310b354093d05ce0d1b6ffcd8af7
")
myapp <- oauth_app("github", "56b637a5baffac62cad9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github", "4462a0309c8ee2327b76", "63122ae952fc310b354093d05ce0d1b6ffcd8af7")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "4462a0309c8ee2327b76", "688b715067782bca09f338c76552db4178188634")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "688b715067782bca09f338c76552db4178188634")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(ggplot2)
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point","smooth"))
qplot(displ, hwy, data=mpg, color=drv, geom=c("point","smooth"), method= x)
qplot(displ, hwy, data=mpg, geom=c("point","smooth"))
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets = drv~., binwidth =2)
str(maacs)
library(sqldf)
install.packages("MySQL" type="source")
install.packages("MySQL" type=source)
install.packages("RMySQL" type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("~/Downloads/RMySQL_0.9-0.tar", repos = NULL)
install.packages("~/Downloads/RMySQL_0.9-3.tar", repos = NULL)
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(RMySQL)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = .~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom ="smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data=airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
hurl <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url(hurl)
htmlCode <- readLines(con)
close(con)
sapply(htmlCode[c(10,20,30,100)], nchar)
getwd()
data1 <- read.table("test/X_test.txt")
setwd("~/Documents/R/UCI HAR Dataset")
getwd()
data1 <- read.table("test/X_test.txt")
data2 <- read.table("train/X_train.txt")
X <- rbind(data1,data2)
data1 <- read.table("test/subject_test.txt")
data2 <- read.table("train/subject_train.txt")
ST <- rbind(data1,data2)
data1 <- read.table("test/Y_test.txt")
data2 <- read.table("train/Y_test.txt")
Y <- rbind(data1,data2)
data1 <- read.table("test/Y_test.txt")
data2 <- read.table("train/Y_train.txt")
Y <- rbind(data1,data2)
features <- read.table("features.txt")
indices_of_good_features <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
X <- X[, indices_of_good_features]
names(X) <- features[indices_of_good_features, 2]
names(X) <- gsub("\\(|\\)", "", names(X))
names(X) <- tolower(names(X))
x
X
indices_of_good_features
?grep
grep("[a-z", letters)
grep("[a-z]", letters)
?gsub
gsub("([ab]", "\\1_\\1_", "abc and ABC")
gsub("([ab])", "\\1_\\1_", "abc and ABC")
?tolower
featurelist <- read.table("features.txt")
m_sd <- grep1 ("(-std\\(\\)|-mean\\(\\))", featurelist$V2)
m_sd <- grep1("(-std\\(\\)|-mean\\(\\))", featurelist$V2)
m_sd <- grep("(-std\\(\\)|-mean\\(\\))", featurelist$V2)
tidy_data <- X[,which(m_sd == TRUE)]
activities <- read.table("activity_labels.txt")
activities[, 2] = gsub("_", "", tolower(as.character(activities[, 2])))
Y[,1] = activities[Y[,1], 2]
names(Y) <- "activity"
View(activities)
View(featurelist)
View(features)
View(featurelist)
View(data2)
View(data1)
View(X)
View(Y)
View(ST)
View(features)
View(data2)
View(data1)
?grep
X <- rbind(data1, data2)
View(X)
View(activities)
View(activities)
activity_label <- read.table("activity_labels.txt")
activity_label[, 2] = gsub("_", "", tolower(as.character(activity_label[, 2])))
Y[,1] = activity_label[Y[,1], 2]
names(Y) <- "activity"
featurelist <- read.table("features.txt")
m_sd <- grep("(-std\\(\\)|-mean\\(\\))", featurelist$2)
tidy_data <- X[,which(m_sd == TRUE)]
featurelist <- read.table("features.txt")
tidy_featurelist <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
X <- X[, tidy_featurelist]
names(X) <- featurelist[tidy_featurelist, 2]
names(X) <- gsub("\\(|\\)", "", names(X))
names(X) <- tolower(names(X))
features <- read.table("features.txt")
indices_of_good_features <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
X <- X[, indices_of_good_features]
names(X) <- features[indices_of_good_features, 2]
names(X) <- gsub("\\(|\\)", "", names(X))
names(X) <- tolower(names(X))
## Question 1 ---  merging all data from train and test to create one data sets
## bind it using "rbind" function
data1 <- read.table("test/X_test.txt")
data2 <- read.table("train/X_train.txt")
X <- rbind(data1, data2)
data1 <- read.table("test/subject_test.txt")
data2 <- read.table("train/subject_train.txt")
ST <- rbind(data1, data2)
data1 <- read.table("test/Y_test.txt")
data2 <- read.table("train/Y_train.txt")
Y <- rbind(data1, data2)
## Question 2 --- Extracts only the measurements on the mean and standard deviation for each measurement.
featurelist <- read.table("features.txt")
m_sd <- grep("(-std\\(\\)|-mean\\(\\))", featurelist$V2)
tidy_data <- X[,which(m_sd == TRUE)]
## Question 3 --- Uses descriptive activity names to name the activities in the data set.
activity_label <- read.table("activity_labels.txt")
activity_label[, 2] = gsub("_", "", tolower(as.character(activity_label[, 2])))
Y[,1] = activity_label[Y[,1], 2]
names(Y) <- "activity"
